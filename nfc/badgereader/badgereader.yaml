substitutions:
    name: badgereader
    friendly_name: Badge Reader

# Insert your SSID and Your PWD after inital setup
wifi:
    networks:
      ssid: !secret wifi_ssid          # Enter your WiFi SSID here. Example: `ssid: 'your_network_name'`
      password: !secret wifi_password      # Enter your wifi password here. Example: `password: 'abcde123456'`
    ap:
      ssid: ${name}
  
# Enable the captive portal for inital WiFi setup
captive_portal:

dashboard_import:
    package_import_url: github://jonnywifi/esphome/nfc/badgereader/badgereader.yaml

improv_serial:

esphome:
  name: $name
  platform: ESP8266
  board: d1_mini

  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: true

  # This will allow for (future) project identification,
  # configuration and updates.
  project:
      name: jonnywifi.badgereader
      version: "0.1"

  # If buzzer is enabled, notify on api connection success
  on_boot:
    priority: -10
    then:
    - wait_until:
        api.connected:
    - logger.log: API is connected!
    - rtttl.play: "success: d=24,o=5,b=100:c,g,b"
    - light.turn_on:
        id: activity_led
        # brightness: 100%
        red: 20%
        green: 0%
        blue: 0%
        # flash_length: 500ms
        effect: "Scan Effect With Custom Values"
    - switch.turn_on: buzzer_enabled
    - switch.turn_on: led_enabled

# Define switches to control LED and buzzer from HA
switch:
- platform: template
  name: "${friendly_name} Buzzer Enabled"
  id: buzzer_enabled
  icon: mdi:volume-high
  optimistic: true
  restore_state: true
  entity_category: config
- platform: template
  name: "${friendly_name} LED enabled"
  id: led_enabled
  icon: mdi:alarm-light-outline
  optimistic: true
  restore_state: true
  entity_category: config
# Enable logging
logger:
# level: VERY_VERBOSE
# level: VERBOSE

# Enable Home Assistant API
api:
  services:
  - service: rfidreader_tag_ok
    then:
    - rtttl.play: "beep:d=16,o=5,b=100:b"
  
  - service: rfidreader_tag_ko
    then:
    - rtttl.play: "beep:d=8,o=5,b=100:b"
  
  - service: play_rtttl
    variables:
      song_str: string
    then:
    - rtttl.play: !lambda 'return song_str;'
  
  - service: write_tag_random
    then:
    - lambda: |-
        static const char alphanum[] = "0123456789abcdef";
        std::string uri = "https://www.home-assistant.io/tag/";
        for (int i = 0; i < 8; i++)
        uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
        uri += "-";
        for (int j = 0; j < 3; j++) {
        for (int i = 0; i < 4; i++)
            uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
        uri += "-";
        }
        for (int i = 0; i < 12; i++)
        uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
        auto message = new nfc::NdefMessage();
        message->add_uri_record(uri);
        ESP_LOGD("tagreader", "Writing payload: %s", uri.c_str());
        id(pn532_board).write_mode(message);
  
  
  - service: write_tag_id
    variables:
      tag_id: string
    then:
    - light.turn_on:
        id: activity_led
        brightness: 100%
        red: 100%
        green: 0%
        blue: 0%    
    - lambda: |-
        auto message = new nfc::NdefMessage();
        std::string uri = "https://www.home-assistant.io/tag/";
        uri += tag_id;
        message->add_uri_record(uri);
        id(pn532_board).write_mode(message);
    - wait_until:
        not:
          pn532.is_writing:
    - light.turn_off:
        id: activity_led
  
  - service: clean_tag
    then:
    - light.turn_on:
        id: activity_led
        brightness: 100%
        red: 100%
        green: 64.7%
        blue: 0%    
    - lambda: 'id(pn532_board).clean_mode();'
    - wait_until:
        not:
          pn532.is_writing:
    - light.turn_off:
        id: activity_led
  
  - service: cancel_writing
    then:
    - lambda: 'id(pn532_board).read_mode();'

# Enable OTA upgrade
ota:

i2c:
  scan: False
  frequency: 400kHz

pn532_i2c:
  id: pn532_board
  on_tag:
    then:
    - homeassistant.tag_scanned: !lambda |
        if (!tag.has_ndef_message()) {
        ESP_LOGD("tagreader", "No NDEF");
        return x;
        }
        auto message = tag.get_ndef_message();
        auto records = message->get_records();
        for (auto &record : records) {
        std::string payload = record->get_payload();
        size_t pos = payload.find("https://www.home-assistant.io/tag/");
        if (pos != std::string::npos) {
            return payload.substr(pos + 34);
        }
        }
        ESP_LOGD("tagreader", "Bad NDEF, fallback to uid");
        return x;
    - if:
        condition:
          switch.is_on: buzzer_enabled
        then:
        - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
    - if:
        condition:
          switch.is_on: led_enabled
        then:
        - light.turn_on:
            id: activity_led
            # brightness: 100%
            # red: 0%
            # green: 100%
            # blue: 0%
            # flash_length: 500ms
            effect: "Flashing Green"
        - delay: 3s
        - light.turn_on:
            id: activity_led
            # brightness: 100%
            red: 20%
            green: 0%
            blue: 0%
            # flash_length: 500ms
            effect: "Scan Effect With Custom Values"            

# Define the buzzer output
output:
- platform: esp8266_pwm
  pin: D7
  id: buzzer

binary_sensor:
- platform: status
  name: "${friendly_name} Status"
  entity_category: diagnostic


text_sensor:
- platform: version
  hide_timestamp: true
  name: "${friendly_name} ESPHome Version"
  entity_category: diagnostic
- platform: wifi_info
  ip_address:
    name: "${friendly_name} IP Address"
    icon: mdi:wifi
    entity_category: diagnostic
  ssid:
    name: "${friendly_name} Connected SSID"
    icon: mdi:wifi-strength-2
    entity_category: diagnostic

# Define buzzer as output for RTTTL
rtttl:
  output: buzzer

# Configure LED
light:
- platform: fastled_clockless
  chipset: WS2812
  pin: D8
  num_leds: 8
  flash_transition_length: 500ms
  rgb_order: GRB
  id: activity_led
  name: "${friendly_name} LED"
  restore_mode: ALWAYS_OFF
  effects:
    - addressable_color_wipe:
    - addressable_color_wipe:
        name: Color Wipe Effect With Custom Values
        colors:
          - red: 20%
            green: 50%
            blue: 20%
            num_leds: 8
          - red: 0%
            green: 0%
            blue: 0%
            num_leds: 8
        add_led_interval: 100ms
        reverse: false
    - addressable_scan:
    - addressable_scan:
        name: Scan Effect With Custom Values
        move_interval: 100ms
        scan_width: 2
    - strobe:
    - strobe:
        name: Flashing Red
        colors:
          - state: true
            brightness: 100%
            red: 100%
            green: 0%
            blue: 0%
            duration: 500ms
          - state: true
            brightness: 0%
            red: 0%
            green: 0%
            blue: 0%
            duration: 500ms
    - strobe:
        name: Flashing Green
        colors:
          - state: true
            brightness: 100%
            red: 0%
            green: 100%
            blue: 0%
            duration: 500ms
          - state: true
            brightness: 0%
            red: 0%
            green: 0%
            blue: 0%
            duration: 500ms
